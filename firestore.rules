rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() { 
      return request.auth != null; 
    }
    
    function uid() { 
      return request.auth.uid; 
    }
    
    function role() { 
      return request.auth.token.role; 
    }
    
    function proId() { 
      return request.auth.token.proId; 
    }
    
    function isPro() { 
      return isSignedIn() && (
        request.auth.token.role == 'PRO' || 
        request.auth.token.proStatus == 'active' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'PRO' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.proStatus == 'active'
      );
    }
    
    function isStaff() { 
      return isSignedIn() && (
        request.auth.token.role == 'STAFF' || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'STAFF'
      );
    }
    
    function isAthlete() { 
      return isSignedIn() && (
        request.auth.token.role == 'ATHLETE' || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ATHLETE'
      );
    }
    
    function isProOrStaff() { 
      return isPro() || isStaff(); 
    }
    
    function isOwnPro() { 
      return isSignedIn() && request.auth.uid == resource.data.proId;
    }
    
    function isTeamMember() { 
      return isSignedIn() && proId() != null; 
    }

    // PRO users can access all data (temporary for debugging)
    match /{document=**} {
      allow read, write: if isPro();
    }

    // Users collection - role-based access with fallback
    match /users/{userId} {
      allow read: if isSignedIn() && (
        userId == uid() || // can read own profile (basic self-access)
        (isPro() && resource.data.proId == uid()) || // PRO can read users where they are the proId
        (isPro() && resource.data.createdBy == uid()) || // PRO can read users they created
        (isPro() && resource.data.role == 'STAFF' && resource.data.proId == uid()) || // PRO can read STAFF users where they are the proId
        (isPro() && resource.data.role == 'ATHLETE' && resource.data.proId == uid()) || // PRO can read ATHLETE users where they are the proId
        (isPro() && resource.data.uid == uid()) || // PRO can read their own user document
        (isStaff() && proId() != null && resource.data.proId == proId()) // STAFF can read team members for analytics
      );
      allow update: if isSignedIn() && userId == uid() && (
        // only allow updating safe fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['displayName', 'photoURL', 'phoneNumber', 'proStatus', 'updatedAt'])
      );
      allow create: if isSignedIn() && userId == uid(); // Allow users to create their own profile
      allow delete: if false; // only deleted by Functions
    }

    // Teams collection - visible to team members only
    match /teams/{teamProId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && teamProId == proId()) || // Team members can read their team
        (isPro() && teamProId == uid()) // PRO can read their own team even without proId claim
      );
      allow write: if false; // Only managed by Cloud Functions for security
    }

    // Invites collection - opaque to clients
    match /invites/{inviteId} {
      allow read: if false; // completely opaque
      allow write: if false; // only managed by Functions
    }

    // Chats collection - team-based access
    match /chats/{chatId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && uid() in resource.data.members) || // Team members can read chats they're in
        (isPro() && proId() == resource.data.proId) // PRO can read team chats even without proId claim
      );
      allow create: if isSignedIn() && (
        (isProOrStaff() && proId() == request.resource.data.proId) || // Team members can create chats
        (isPro() && request.resource.data.proId == uid()) // PRO can create chats for their team
      );
      allow update, delete: if isSignedIn() && (
        (isProOrStaff() && proId() == resource.data.proId) || // Team members can update chats
        (isPro() && resource.data.proId == uid()) // PRO can update team chats
      );
    }

    // Messages subcollection - immutable once created
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && uid() in get(/databases/$(database)/documents/chats/$(chatId)).data.members) || // Team members can read messages
        (isPro() && get(/databases/$(database)/documents/chats/$(chatId)).data.proId == uid()) // PRO can read team messages
      );
      allow create: if isSignedIn() && (
        (isTeamMember() && uid() in get(/databases/$(database)/documents/chats/$(chatId)).data.members) || // Team members can create messages
        (isPro() && get(/databases/$(database)/documents/chats/$(chatId)).data.proId == uid()) // PRO can create team messages
      );
      allow update, delete: if false; // immutable
    }

    // Events collection - role-based access
    match /events/{eventId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) || // Team members can read team events
        (isPro() && resource.data.proId == uid()) || // PRO can read their team events
        (isPro() && uid() == resource.data.proId) || // PRO can read events where they are the proId
        (isPro() && resource.data.createdBy == uid()) || // PRO can read events they created
        (isStaff() && proId() != null && resource.data.proId == proId()) || // STAFF can read team events for analytics
        (isAthlete() && uid() in resource.data.attendees) // Athletes can see events they're in
      );
      allow create, update: if isSignedIn() && (
        (isProOrStaff() && proId() == request.resource.data.proId) || // Team members can manage events
        (isPro() && request.resource.data.proId == uid()) || // PRO can manage their team events
        (isPro() && uid() == request.resource.data.proId) || // PRO can manage events where they are the proId
        (isPro() && uid() == request.resource.data.createdBy) // PRO can manage events they created
      );
      allow delete: if isSignedIn() && (
        (isProOrStaff() && proId() == resource.data.proId) || // Team members can delete events
        (isPro() && resource.data.proId == uid()) || // PRO can delete their team events
        (isPro() && uid() == resource.data.proId) || // PRO can delete events where they are the proId
        (resource.data.createdBy == uid()) // Creator can always delete their own events
      );
    }

    // Payments collection - summary only, no client writes
    match /payments/{paymentId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && (isPro() && proId() == resource.data.proId)) || // Team members can read team payments
        (isPro() && resource.data.proId == uid()) || // PRO can read their team payments
        (isPro() && uid() == resource.data.proId) || // PRO can read payments where they are the proId
        (isAthlete() && resource.data.payerUid == uid()) // Athletes can see their own payments
      );
      allow write: if false; // only via Functions/webhooks
    }

    // Programs collection - SWEATsheet access
    match /programs/{programId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) || // Team members can read team programs
        (isPro() && resource.data.proId == uid()) || // PRO can read their team programs
        (isAthlete() && resource.data.athleteUid == uid()) // Athletes can see their own programs
      );
      allow create, update, delete: if isSignedIn() && (
        (isProOrStaff() && proId() == request.resource.data.proId) || // Team members can manage programs
        (isPro() && resource.data.proId == uid()) // PRO can manage their team programs
      );
    }

    // Program Templates collection - scoped to team
    match /program_templates/{templateId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) ||
        (isPro() && resource.data.proId == uid())
      );
      allow create, update, delete: if isSignedIn() && (
        (isProOrStaff() && proId() == request.resource.data.proId) ||
        (isPro() && request.resource.data.proId == uid())
      );
    }

    // Exercises collection - exercise library access
    match /exercises/{exerciseId} {
      allow read: if isSignedIn() && resource.data.proId == proId(); // Team-scoped reads only
      allow create: if isSignedIn() && (
        (isProOrStaff() && proId() == request.resource.data.proId) || // Team members can create exercises
        (isPro() && request.resource.data.createdBy == uid()) // PRO can create exercises for their team
      );
      allow update, delete: if isSignedIn() && (
        (isProOrStaff() && resource.data.proId == proId()) || // Team members can manage team exercises
        (isPro() && resource.data.createdBy == uid()) // PRO can manage exercises they created
      );
    }

    // Training Packages collection - PRO creates, athletes can read available ones
    match /trainingPackages/{packageId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) || // Team members can read team packages
        (isPro() && resource.data.proId == uid()) || // PRO can read their own packages
        (isPro() && uid() == resource.data.proId) || // PRO can read packages where they are the proId
        (isPro() && resource.data.proId == uid()) || // PRO can read packages they created
        (isPro() && uid() == resource.data.createdBy) || // PRO can read packages they created
        (isAthlete() && resource.data.status == 'active') // Athletes can see active packages
      );
      allow create, update, delete: if isSignedIn() && (
        (isPro() && request.resource.data.proId == uid()) || // Only PRO can manage their packages
        (isPro() && uid() == request.resource.data.proId) || // PRO can manage packages where they are the proId
        (isPro() && request.resource.data.proId == uid()) || // PRO can manage packages they're creating
        (isPro() && uid() == request.resource.data.createdBy) // PRO can manage packages they created
      );
    }

    // Package Purchases collection - athletes can read their own, PRO can read team purchases
    match /packagePurchases/{purchaseId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) || // Team members can read team purchases
        (isPro() && resource.data.proId == uid()) || // PRO can read their team purchases
        (isAthlete() && resource.data.athleteUid == uid()) // Athletes can see their own purchases
      );
      allow create, update: if isSignedIn() && (
        (isAthlete() && request.resource.data.athleteUid == uid()) || // Athletes can create/update their purchases
        (isPro() && request.resource.data.proId == uid()) // PRO can manage team purchases
      );
      allow delete: if false; // No deletions allowed
    }

    // Availability Slots collection - PRO and STAFF can manage their availability
    match /availabilitySlots/{slotId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) || // Team members can read team availability
        (isPro() && resource.data.proId == uid()) || // PRO can read their team availability
        (isStaff() && resource.data.userId == uid()) || // STAFF can read their own availability
        (isAthlete() && proId() == resource.data.proId) // Athletes can see team availability for booking
      );
      allow create, update: if isSignedIn() && (
        (isPro() && request.resource.data.proId == uid()) || // PRO can manage team availability
        (isStaff() && request.resource.data.userId == uid() && request.resource.data.proId == proId()) // STAFF can manage their own availability
      );
      allow delete: if isSignedIn() && (
        (isPro() && resource.data.proId == uid()) || // PRO can delete team availability
        (isStaff() && resource.data.userId == uid()) // STAFF can delete their own availability
      );
    }

    // Availability Templates collection - PRO and STAFF can create reusable templates
    match /availabilityTemplates/{templateId} {
      allow read: if isSignedIn() && (
        (isTeamMember() && proId() == resource.data.proId) || // Team members can read team templates
        (isPro() && resource.data.proId == uid()) || // PRO can read their team templates
        (isStaff() && resource.data.userId == uid()) // STAFF can read their own templates
      );
      allow create, update, delete: if isSignedIn() && (
        (isPro() && request.resource.data.proId == uid()) || // PRO can manage team templates
        (isStaff() && request.resource.data.userId == uid() && request.resource.data.proId == proId()) // STAFF can manage their own templates
      );
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
